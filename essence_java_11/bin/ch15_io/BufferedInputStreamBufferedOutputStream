3.2 BufferedInputStream 과 BufferedOutputStream

BufferedInputStream / BufferedOutputStream은 스트림의 입출력 효율을 높이기 위해 
버퍼를 사용하는 보조스트림이다. 한 바이트씩 입출력하는 것 보다는 버퍼(바이트 배열)를 이용해서
한 번에 여러 바이트를 입출력하는 것이 빠르기 때문에 대부분의 입출력 작업에 사용된다.

BufferedInputStream(InputStream in, int size) 
 => 주어진 InputStream 인스턴스를 입력소스(input source)로 하며 
    지정된 크기(byte단위) 의 버퍼를 갖는 BufferedInputStream 인스턴스를 생성한다.
 
BufferedInputStream(InputStream in)
 => 주어진 InputStream 인스턴스를 입력소스(input source)로 하며 
    버퍼의 크기를 지정해주지 않으므로 기본적으로 8192 byte 크기의 버퍼를 갖게된다.
    
BufferedInputStream 의 버퍼크기는 입력소스로부터 한 번에 가져올 수 있는 데이터의 크기로 지정하면 좋다.
보통 입력소스가 파일인 경우 8192(8K) 정도의 크리고 하는 것이 보통이며, 버퍼의 크기를 변경해 가면서 테스트하면 
최적의 버퍼크기를 알아낼 수 있다.

프로그램에서 입력소스로 부터 데이터를 읽기 위해 처음으로 read메서드를 호출하면,    BufferedInputStream은 입력소스로
부터 버퍼 크기만큼의 데이터를 읽어다 자신의 내부 버퍼에 저장한다. 이제 프로그램에서는 BufferedInputStream의 버퍼에 
저장된 데이터를 읽으면 되는 것이다. 외부의 입력소스로 부터 읽는 것보다 내부의 버퍼로 부터 읽는 것이 훨씬 빠르기 
때문에 그만큼 작업 효율이 높아진다.

프로그램에서 버퍼에 저장된 모든 데이터를 다 읽고 그 다음 데이터를 읽기 위해 read 메서드가 호출되면 ,
BufferedInputStream은 입력소스로 부터 다시 버퍼크기 만큼의 데이터를 읽어다 버퍼에 저장해 놓는다. 이와 같은 작업이 계속 반복된다.

BufferedOutputStream(OutputStream out, int size)
	=> 주어진 OutputStream 인스턴스를 출력소스(output source)로하며 지정된 크기(단위byte)의 버퍼를 갖는 BufferedOutputStream 인스턴스를 생성한다.
	
BufferedOutputStream(OutputStream out)
	=> 주어진 OutputStream 인스턴스를 출력소스(output source)로하며 버퍼의 크기를 지정해주지 않으므로 기본적으로 8192 byte 크기의 버퍼를 갖게 된다.
	
flush()
	=> 버퍼의 모든 내용을 출력소스에 출력한 다음, 버퍼를 비운다.
	
close()
	=> flush()를 호출해서 버퍼의 모든 내용을 출력소스에 출력하고, BufferedOutputStream 인스턴스가 사용하던 모든 자원을 반환한다.
	
	
BufferedOutputStream 역시 버퍼를 이용해서 출력소스와 작업을 하게 되는데, 입력 소스로부터 데이터를 읽을 때와는 반대로, 
프로그램에서 write메서드를 이용한 출력이 BufferedOutputStream의 버퍼에 저장된다. 버퍼가 가득차면, 그 때 버퍼의 모든
내용을 출력소스에 출력한다. 그리고는 버퍼를 비우고 다시 프로그램으로 부터의 출력을 저장할 준비를 한다.
버퍼가 가득 찼을 때만 출력소스에 출력을 하기 때문에, 마지막 출력부분이 출력소스에 쓰이지 못하고 BufferedOutputStream 의 
버퍼에 남아있는 채로 프로그램이 종료될 수 있다는 점을 주의해야 한다.
그래서 프로그램에서 모든 출력작업ㅇ르 마친 후 BufferedOutputStream에 close()나 flush()를 호출해서 마지막에 버퍼에 있는 모든
내용이 출력소스에 출력되도록 해야 한다. 

※ 참고 : BufferedOutputStream 의 close()는 flush()를 호출하여 버퍼의 내용을 출력스트림에 쓰도록 한 후 ,
		 BufferedOutputStream 인스턴스의 참조변수에 null을 지정함으로써 사용하던 자원들이 반환되게 한다.



